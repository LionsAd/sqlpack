{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLPack","text":"<p>A cross-platform toolkit to export SQL Server databases and import them into developer environments. SQLPack unifies Bash and PowerShell helpers behind a single <code>sqlpack</code> CLI for consistent usage on macOS, Linux, and Windows.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Prerequisites (tools): see Installation for setup. You need <code>sqlcmd</code> and <code>bcp</code> (mssql-tools18), PowerShell 7+ (<code>pwsh</code>), and the dbatools module.</p> <p>Tip on verbosity: commands are quiet at the default <code>BASH_LOG=error</code>. For day\u2011to\u2011day runs, <code>BASH_LOG=info</code> shows progress; use <code>BASH_LOG=trace</code> to see everything (full tool output). At <code>info</code>/<code>debug</code>, detailed tool output may be summarized; open the referenced logs or use <code>trace</code> for full console visibility.</p> <p>Caution: <code>info</code> adds many success/progress lines and can make errors easier to overlook in long runs. The default <code>error</code> level is intentional to keep failures obvious; prefer it for CI or longer unattended runs.</p> <pre><code># 1) Install SQLPack (to /usr/local; use PREFIX for custom path)\nsudo make install\n\n# 2) Install required tools (preview or execute)\n# Preview the commands for your OS\nsqlpack install-tools\n# Execute them automatically (macOS Homebrew or Ubuntu/Debian apt)\nsqlpack install-tools --execute\n\n# 3) Validate your environment (PowerShell, dbatools, sqlcmd, bcp)\nsqlpack doctor\n\n# 4) Export a database (creates ./db-export and db-dump.tar.gz)\nBASH_LOG=info sqlpack export --server localhost,1433 --database MyApp\n\n# 5) Import into a local dev instance\nBASH_LOG=info sqlpack import --archive db-dump.tar.gz --database MyAppDev\n\n# 6) Explore help for flags and env vars\nsqlpack help\nsqlpack export --help\nsqlpack import --help\n</code></pre> <ul> <li><code>sqlpack install-tools</code> previews or executes tool installation steps.</li> <li>Use <code>sqlpack doctor</code> before first use or when troubleshooting.</li> <li>See Installation to set up tools and environment.</li> <li>See Usage for common flows and quick examples.</li> <li>See Logging for recommended verbosity and tips.</li> <li>Commands reference: Export, Import, Export Data, Doctor, Install Tools.</li> </ul>"},{"location":"#what-you-get","title":"What You Get","text":"<ul> <li>Repeatable exports for CI with schema + data</li> <li>Developer-friendly imports with logs in <code>./logs/</code></li> <li>Cross-platform scripts with consistent logging and flags</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Repository: https://github.com/LionsAd/sqlpack</li> <li>Issues: https://github.com/LionsAd/sqlpack/issues</li> </ul>"},{"location":"ci/","title":"CI/CD","text":""},{"location":"ci/#github-actions-export-example","title":"GitHub Actions: Export Example","text":"<pre><code>name: Database Export\non:\n  schedule:\n    - cron: '0 2 * * *'\n  workflow_dispatch:\n\njobs:\n  export:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Install PowerShell\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y powershell\n\n      - name: Install dbatools\n        run: pwsh -c \"Install-Module dbatools -Force -Scope CurrentUser\"\n\n      - name: Export Database\n        env:\n          DB_SERVER: ${{ secrets.DB_SERVER }}\n          DB_NAME: ${{ secrets.DB_NAME }}\n          DB_USERNAME: ${{ secrets.DB_USERNAME }}\n          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}\n          # BASH_LOG: info   # uncomment for progress-level logs in CI\n          # BASH_LOG: trace  # uncomment to stream all commands and outputs\n        run: ./sqlpack export\n\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: database-dump\n          path: db-dump.tar.gz\n</code></pre>"},{"location":"ci/#github-pages-docs","title":"GitHub Pages Docs","text":"<p>Docs are built with MkDocs Material and deployed to the <code>gh-pages</code> branch via GitHub Actions. See workflow in <code>.github/workflows/docs.yml</code>.</p>"},{"location":"ci/#first-time-setup-github-pages","title":"First-Time Setup (GitHub Pages)","text":"<ul> <li>Merge the workflow to <code>main</code>. The first successful run creates/updates the <code>gh-pages</code> branch.</li> <li>In GitHub: Settings \u2192 Pages \u2192 Build and deployment:</li> <li>Source: Deploy from a branch</li> <li>Branch: <code>gh-pages</code> and Folder: <code>/ (root)</code></li> <li>Save. Pages will publish within a minute or two.</li> <li>Your site URL will be <code>https://&lt;user-or-org&gt;.github.io/&lt;repo&gt;/</code> (e.g., <code>https://lionsad.github.io/sqlpack/</code>).</li> </ul> <p>Optional: - Use a custom domain under Settings \u2192 Pages \u2192 Custom domain. - Preview locally with <code>pip install mkdocs mkdocs-material</code> then <code>mkdocs serve</code>.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Environment variables and flags control server, authentication, limits, and output locations.</p>"},{"location":"configuration/#common-environment-variables","title":"Common Environment Variables","text":"Variable Description <code>DB_SERVER</code> SQL Server instance (e.g., <code>localhost,1499</code>) <code>DB_NAME</code> Database name (required for export) <code>DB_USERNAME</code> SQL Server username (omit for trusted connection) <code>DB_PASSWORD</code> SQL Server password <code>DB_EXPORT_DIR</code> Export directory (default: <code>./db-export</code>) <code>DB_ARCHIVE_NAME</code> Archive file name (default: <code>db-dump.tar.gz</code>) <code>DB_ROW_LIMIT</code> Max rows per table (export) <code>DB_SCHEMA_ONLY_TABLES</code> Comma-separated list of tables to export schema only"},{"location":"configuration/#logging-environment-variables","title":"Logging Environment Variables","text":"Variable Description <code>BASH_LOG</code> Log level: <code>error</code> (default), <code>warn</code>, <code>info</code> (recommended), <code>debug</code>, <code>trace</code> <code>BASH_LOG_TIMESTAMP</code> <code>true</code>/<code>false</code> to prefix log lines with timestamps"},{"location":"configuration/#import-defaults","title":"Import Defaults","text":"<ul> <li>Working directory: <code>./db-import-work</code></li> <li>Logs directory: <code>./logs/</code></li> </ul>"},{"location":"configuration/#security-tips","title":"Security Tips","text":"<ul> <li>Prefer trusted connections where possible</li> <li>Avoid printing credentials in logs</li> <li>Use <code>DB_TRUST_SERVER_CERTIFICATE</code> if needed for development</li> </ul>"},{"location":"develop/","title":"Development","text":""},{"location":"develop/#lint-and-tests","title":"Lint and Tests","text":"<pre><code># Lint Bash scripts\nmake lint\n\n# Run tests (bats)\nmake test\n</code></pre>"},{"location":"develop/#useful-commands","title":"Useful Commands","text":"<pre><code># Help\n./sqlpack help\n\n# Export\nBASH_LOG=trace ./sqlpack export --server localhost,1433 --database MyDb\n\n# Import\nBASH_LOG=trace ./sqlpack import --archive db-dump.tar.gz --database MyDbDev\n\n# Export Data (BCP)\nBASH_LOG=trace ./sqlpack export-data -s \"localhost,1499\" -d MyDb -D ./data -t ./tables.txt\n</code></pre>"},{"location":"develop/#guidelines","title":"Guidelines","text":"<ul> <li>Bash: <code>#!/bin/bash</code> + <code>set -euo pipefail</code>, quote vars, prefer arrays</li> <li>PowerShell: explicit parameters, use <code>[switch]</code> flags, map to <code>-Verbose</code>/<code>-Debug</code></li> <li>Filenames: lowercase kebab-case; functions: lower_snake_case</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#it-looks-like-nothing-is-happening","title":"It looks like nothing is happening","text":"<ul> <li>Default logging is quiet (<code>BASH_LOG=error</code>). Run with <code>BASH_LOG=info</code> to see progress, or <code>BASH_LOG=trace</code> to stream all commands and outputs.</li> <li>For imports, check logs in <code>./logs/</code>.</li> </ul>"},{"location":"faq/#common-export-issues","title":"Common Export Issues","text":"<ul> <li>dbatools not found: <code>Install-Module dbatools -Scope CurrentUser -Force</code></li> <li><code>bcp</code> not found: install SQL Server command line tools and ensure PATH</li> <li>Connection timeouts: verify firewall, remote connections, test with <code>sqlcmd</code></li> </ul>"},{"location":"faq/#common-import-issues","title":"Common Import Issues","text":"<ul> <li>Database exists: use <code>--force</code> to recreate</li> <li>Permission denied: ensure user has CREATE DATABASE rights</li> <li>Data mismatches: check schema alignment and constraints</li> </ul>"},{"location":"faq/#where-are-logs","title":"Where are logs?","text":"<ul> <li>Import logs under <code>./logs/</code> with per-file details</li> </ul>"},{"location":"install/","title":"Installation","text":"<p>Quick bootstrap: <code>sqlpack install-tools</code> prints the required commands for your OS; add <code>--execute</code> to run them automatically (macOS Homebrew or Ubuntu/Debian apt). After installation, verify with <code>sqlpack doctor</code>.</p>"},{"location":"install/#system-wide-install","title":"System-wide Install","text":"<pre><code># Install to /usr/local (requires sudo)\nsudo make install\n\n# Or install to a custom prefix (no sudo)\nPREFIX=$HOME/.local make install\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"install/#development-usage","title":"Development Usage","text":"<pre><code># Run directly from source\n./sqlpack help\n</code></pre>"},{"location":"install/#uninstall","title":"Uninstall","text":"<pre><code>sudo make uninstall\n\n# Or for custom prefix\nPREFIX=$HOME/.local make uninstall\n</code></pre>"},{"location":"install/#prerequisites","title":"Prerequisites","text":"<ul> <li>PowerShell Core for export in CI (dbatools module)</li> <li>SQL Server client tools (<code>sqlcmd</code>, <code>bcp</code> as needed)</li> <li>tar utility (usually available on macOS/Linux)</li> </ul>"},{"location":"install/#install-sqlcmd-and-bcp-mssql-tools18","title":"Install sqlcmd and bcp (mssql-tools18)","text":""},{"location":"install/#macos-homebrew","title":"macOS (Homebrew)","text":"<pre><code># Tap Microsoft's Homebrew repo\nbrew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release\n\n# Accept EULA and install ODBC + tools\nACCEPT_EULA=Y brew install msodbcsql18 mssql-tools18\n\n# Add mssql-tools18 to PATH (Apple Silicon)\necho 'export PATH=\"/opt/homebrew/opt/mssql-tools18/bin:$PATH\"' &gt;&gt; ~/.zshrc\n\n# For Intel Macs use:\n# echo 'export PATH=\"/usr/local/opt/mssql-tools18/bin:$PATH\"' &gt;&gt; ~/.zshrc\n\n# Reload shell config (or open a new terminal)\nsource ~/.zshrc\n\n# Verify\nsqlcmd -?\nbcp -?\n</code></pre> <p>Microsoft docs: - Install SQL Server command-line tools on macOS - ODBC Driver 18 for SQL Server</p>"},{"location":"install/#ubuntudebian-summary","title":"Ubuntu/Debian (summary)","text":"<p>Follow Microsoft\u2019s instructions to add the package repo, then install:</p> <pre><code>sudo apt-get update\nsudo apt-get install -y msodbcsql18 mssql-tools18\necho 'export PATH=\"/opt/mssql-tools18/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\nsqlcmd -?\n</code></pre> <p>Microsoft docs: - Linux tools install (Ubuntu/Debian/RHEL/Fedora)</p>"},{"location":"install/#install-powershell-and-dbatools","title":"Install PowerShell and dbatools","text":""},{"location":"install/#macos","title":"macOS","text":"<pre><code># Install PowerShell\nbrew install --cask powershell\n\n# Verify\npwsh -v\n\n# Install dbatools module (current user scope)\npwsh -NoLogo -NoProfile -Command \"Install-Module dbatools -Scope CurrentUser -Force\"\n\n# Verify module loads\npwsh -NoLogo -NoProfile -Command \"Import-Module dbatools; Get-Module dbatools\"\n</code></pre> <p>Microsoft docs: - Install PowerShell on macOS</p>"},{"location":"install/#ubuntudebian-summary_1","title":"Ubuntu/Debian (summary)","text":"<pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y powershell\npwsh -NoLogo -NoProfile -Command \"Install-Module dbatools -Scope CurrentUser -Force\"\n</code></pre> <p>Microsoft docs: - Install PowerShell on Linux</p> <p>dbatools docs: - dbatools documentation</p>"},{"location":"logging/","title":"Logging","text":"<p>SQLPack scripts support configurable logging for both Bash and PowerShell wrappers.</p> <p>Recommended defaults: - Default is <code>error</code> to keep failures highly visible (minimal noise). - Use <code>info</code> during interactive runs to see progress, but be aware it can drown out errors in long runs. - Use <code>trace</code> to stream every command and full output for troubleshooting.</p> <p>Note on error visibility: - Full tool output is not printed at <code>error</code>/<code>info</code>/<code>debug</code> levels; commands write detailed logs to files and show summaries on failure. - <code>error</code> keeps console output concise so failures stand out (fewer success lines to bury errors). - <code>info</code> adds many success/progress lines, which can make errors easier to miss in long runs. Prefer <code>error</code> for CI/long runs; switch to <code>trace</code> when you need full, live context.</p>"},{"location":"logging/#bash-scripts","title":"Bash Scripts","text":"<p>Use <code>BASH_LOG</code> to control verbosity and <code>BASH_LOG_TIMESTAMP=true</code> to add timestamps.</p> <pre><code># Default: errors only (quiet)\nsqlpack export\n\n# Info level\nBASH_LOG=info sqlpack export\n\n# Debug and trace\nBASH_LOG=debug sqlpack export-data\nBASH_LOG=trace sqlpack import\n\n# Add timestamps\nBASH_LOG_TIMESTAMP=true BASH_LOG=debug sqlpack export\n</code></pre> <p>Log files for import are written to <code>./logs/</code>.</p>"},{"location":"logging/#powershell-exportps1","title":"PowerShell (export.ps1)","text":"<p>Use <code>-Verbose</code>, <code>-Debug</code>, or <code>PS_LOG_LEVEL</code>.</p> <pre><code># Verbose\npwsh ./commands/export.ps1 -SqlInstance \"server\" -Database \"db\" -Verbose\n\n# Debug\npwsh ./commands/export.ps1 -SqlInstance \"server\" -Database \"db\" -Debug\n\n# Environment variable\n$env:PS_LOG_LEVEL = \"Debug\"\npwsh ./commands/export.ps1 -SqlInstance \"server\" -Database \"db\"\n\nTip: `sqlpack export`/`commands/export.sh` propagate `BASH_LOG` to PowerShell via `PS_LOG_LEVEL` automatically when set.\n</code></pre>"},{"location":"usage/","title":"Usage Overview","text":"<p>SQLPack provides a unified CLI via <code>sqlpack</code> with subcommands for export, import, and data export.</p>"},{"location":"usage/#quick-examples","title":"Quick Examples","text":"<pre><code># Bootstrap tools (macOS Homebrew or Ubuntu/Debian apt)\nsqlpack install-tools --execute\n\n# Export (creates ./db-export and db-dump.tar.gz)\nBASH_LOG=info sqlpack export --server localhost,1433 --database MyApp\n\n# Import into local dev\nBASH_LOG=info sqlpack import --archive db-dump.tar.gz --database MyAppDev\n\n# Export data with BCP helper\nBASH_LOG=info sqlpack export-data -s \"localhost,1499\" -d MyDb -D ./data -t ./tables.txt\n</code></pre> <p>See the individual command pages for flags and environment variables.</p> <p>Tip: Use <code>BASH_LOG=trace</code> to stream all sub-commands and outputs when debugging. Note: <code>info</code> adds progress lines and can bury errors in long outputs; prefer default <code>error</code> for CI/long runs. At <code>info</code>/<code>debug</code>, some tool output is summarized; check the generated logs or switch to <code>trace</code> for full console visibility.</p>"},{"location":"commands/doctor/","title":"Doctor","text":"<p>Validates your environment for SQLPack export/import workflows.</p>"},{"location":"commands/doctor/#usage","title":"Usage","text":"<pre><code># Shows info-level diagnostics by default (recommended)\nsqlpack doctor\n\n# Increase or decrease verbosity\nBASH_LOG=debug sqlpack doctor\nBASH_LOG=error sqlpack doctor\n\n# Stream every check and command output (trace)\nBASH_LOG=trace sqlpack doctor\n\n# Show help\nsqlpack doctor --help\n</code></pre>"},{"location":"commands/doctor/#what-it-checks","title":"What It Checks","text":"<ul> <li>PowerShell (<code>pwsh</code>) presence and version</li> <li>dbatools PowerShell module is importable</li> <li>SQL Server tools: <code>sqlcmd</code> and <code>bcp</code> on PATH</li> </ul>"},{"location":"commands/doctor/#exit-codes","title":"Exit Codes","text":"<ul> <li>0 \u2013 All required tools are present</li> <li>1 \u2013 One or more checks failed</li> </ul>"},{"location":"commands/doctor/#example-output-success","title":"Example Output (success)","text":"<pre><code>[INFO]\n[INFO] === SQLPack Doctor ===\n\u2713 pwsh: found (/usr/local/bin/pwsh)\n\u2713 dbatools: importable in PowerShell\n\u2713 sqlcmd: found (/opt/homebrew/bin/sqlcmd)\n\u2713 bcp: found (/opt/homebrew/bin/bcp)\n[INFO]\n[INFO] === SUMMARY ===\n\u2713 All required tools are present.\n</code></pre> <p>If dbatools is missing, see the Installation guide and dbatools docs at https://docs.dbatools.io/.</p> <p>Note: <code>doctor</code> shows info-level diagnostics by default. Override via <code>BASH_LOG</code> as needed (use <code>trace</code> for deep debugging).</p> <p>Tip: If any tools are missing, run <code>sqlpack install-tools</code> to preview or <code>sqlpack install-tools --execute</code> to automatically install them (macOS Homebrew or Ubuntu/Debian), then re-run <code>sqlpack doctor</code>.</p>"},{"location":"commands/export-data/","title":"Export Data (BCP)","text":"<p>Exports table data using <code>bcp</code> in native format with <code>.fmt</code> files. Useful for advanced or selective data moves.</p>"},{"location":"commands/export-data/#examples","title":"Examples","text":"<pre><code># Export data for listed tables to ./data\nBASH_LOG=info sqlpack export-data -s \"localhost,1499\" -d MyDb -D ./data -t ./tables.txt\n</code></pre> <p><code>./tables.txt</code> should contain <code>Database.Schema.Table</code> names, one per line.</p> <p>Tip: Use <code>BASH_LOG=trace</code> to stream each bcp command and its output.</p> <p>Note: At <code>info</code>/<code>debug</code>, command output is captured to <code>.log</code> files next to the data/format files and summarized on errors. Use <code>trace</code> to stream everything to the console while still writing logs.</p>"},{"location":"commands/export/","title":"Export","text":"<p>Exports database schema and data and produces <code>./db-export</code> and <code>db-dump.tar.gz</code>.</p>"},{"location":"commands/export/#examples","title":"Examples","text":"<pre><code># Minimal (server, database)\nsqlpack export --server localhost,1433 --database MyApp\n\n# With credentials and options\nDB_ROW_LIMIT=10000 \\\nDB_SCHEMA_ONLY_TABLES=\"AuditLog,TempData\" \\\nDB_EXPORT_DIR=\"./exports\" \\\nDB_ARCHIVE_NAME=\"myapp-dev-dump.tar.gz\" \\\nsqlpack export --server localhost,1499 --database MyApp --username sa --password MyPassword\n</code></pre>"},{"location":"commands/export/#common-scenarios","title":"Common Scenarios","text":"<pre><code># Use environment variables (recommended for CI)\nexport DB_SERVER=\"prod.server.com,1433\"\nexport DB_NAME=\"MyApp\"\nexport DB_USERNAME=\"backup_user\"\nexport DB_PASSWORD=\"******\"\nsqlpack export\n\n# Trusted connection (omit username/password)\nsqlpack export --server \"corp-sql01,1433\" --database MyApp\n\n# Custom port and archive name\nDB_EXPORT_DIR=./db-export \\\nDB_ARCHIVE_NAME=myapp-2024-09-16.tar.gz \\\nsqlpack export --server \"localhost,1499\" --database MyApp\n\n# Limit data volume for dev dumps\nDB_ROW_LIMIT=50000 sqlpack export --server \"localhost,1499\" --database MyApp\n\n# Exclude heavy tables from data export (schema-only)\nDB_SCHEMA_ONLY_TABLES=\"AuditLog,LargeFactTable,SessionLog\" \\\nsqlpack export --server \"localhost,1499\" --database MyApp\n\n# Trust self-signed certificates when needed\nDB_TRUST_SERVER_CERTIFICATE=true \\\nsqlpack export --server \"staging.company.net,1433\" --database MyApp\n\n# Increase logging for troubleshooting (propagates to PowerShell)\nBASH_LOG=debug sqlpack export --server localhost,1433 --database MyApp\n</code></pre>"},{"location":"commands/export/#verifying-outputs","title":"Verifying Outputs","text":"<pre><code># List generated files\nls -1 ./db-export\n\n# Inspect table list (Database.Schema.Table)\nsed -n '1,20p' ./db-export/tables.txt\n\n# Show the schema import order\ncat ./db-export/schemas.txt\n\n# Confirm archive exists\nls -lh ./db-dump.tar.gz\n</code></pre>"},{"location":"commands/export/#notes","title":"Notes","text":"<ul> <li>Default export directory: <code>./db-export</code></li> <li>Default archive name: <code>db-dump.tar.gz</code> in current directory</li> <li>PowerShell exporter uses <code>dbatools</code> under the hood (see CI)</li> </ul> <p>Tip: Run <code>sqlpack doctor</code> first or use <code>sqlpack install-tools --execute</code> to bootstrap sqlcmd/bcp, PowerShell, and dbatools.</p>"},{"location":"commands/export/#logging","title":"Logging","text":"<p>Exports are quiet at the default error level. Choose a level based on your context:</p> <pre><code># Show progress and key steps during export (interactive runs)\nBASH_LOG=info sqlpack export --server localhost,1433 --database MyApp\n\n# See detailed, real-time schema export and data steps\nBASH_LOG=trace sqlpack export --server localhost,1433 --database MyApp\n</code></pre> <p>Note: <code>info</code> prints many success/progress lines and can bury errors in long outputs. For CI/long runs, prefer the default <code>error</code> level so failures stand out.</p>"},{"location":"commands/import/","title":"Import","text":"<p>Imports a previously created <code>db-dump.tar.gz</code> archive into a target database.</p>"},{"location":"commands/import/#examples","title":"Examples","text":"<pre><code># Basic import into local dev instance\nsqlpack import --archive db-dump.tar.gz --database MyAppDev\n\n# Custom server/auth and force recreate\nsqlpack import \\\n  --archive db-dump.tar.gz \\\n  --database MyAppDev \\\n  --server \"localhost,1499\" \\\n  --username sa \\\n  --password MyPassword \\\n  --force\n</code></pre>"},{"location":"commands/import/#common-scenarios","title":"Common Scenarios","text":"<pre><code># Use trusted connection on default port\nsqlpack import --archive db-dump.tar.gz --database MyAppDev --server \"corp-sql01,1433\"\n\n# Force recreate if DB exists\nsqlpack import --archive db-dump.tar.gz --database MyAppDev --force\n\n# Import schema only (skip data)\nsqlpack import --archive db-dump.tar.gz --database MyAppDev --skip-data\n\n# Trust self-signed certificates\nsqlpack import --archive db-dump.tar.gz --database MyAppDev \\\n  --server \"staging.company.net,1433\" --trust-server-certificate\n\n# Customize the working directory used during extraction\nsqlpack import --archive db-dump.tar.gz --database MyAppDev --work-dir ./tmp/import-work\n\n# Increase logging for troubleshooting\nBASH_LOG=trace sqlpack import --archive db-dump.tar.gz --database MyAppDev\n</code></pre>"},{"location":"commands/import/#logging","title":"Logging","text":"<p>Imports are quiet at the default error level. Choose a level based on your context:</p> <pre><code># Show progress and key steps during import\nBASH_LOG=info sqlpack import --archive db-dump.tar.gz --database MyAppDev\n\n# Stream every sqlcmd/bcp invocation and output (verbose troubleshooting)\nBASH_LOG=trace sqlpack import --archive db-dump.tar.gz --database MyAppDev\n</code></pre> <p>Note: <code>info</code> prints many success/progress lines and can bury errors in long outputs. For CI/long runs, prefer <code>error</code>. At <code>info</code>/<code>debug</code>, detailed tool output is captured to log files and summarized on failure; use <code>trace</code> for full console context or inspect the logs in <code>./logs/</code> (and per-table logs in the working directory during data import).</p>"},{"location":"commands/import/#after-import","title":"After Import","text":"<pre><code># Connect with sqlcmd (trusted connection shown)\nsqlcmd -S \"localhost,1499\" -d MyAppDev -Q \"SELECT TOP 5 name FROM sys.tables\"\n\n# Connect with SQL auth\nsqlcmd -S \"localhost,1499\" -U sa -P \"YourPassword123\" -d MyAppDev -Q \"SELECT 1\"\n</code></pre> <p>Logs are written under <code>./logs/</code>. For schema imports, see <code>./logs/import_&lt;filename&gt;.log</code>. The sqlcmd wrapper log is <code>./logs/import-sqlcmd.log</code>.</p>"},{"location":"commands/import/#notes","title":"Notes","text":"<ul> <li>Working directory: <code>./db-import-work</code></li> <li>Logs written to: <code>./logs/</code></li> <li>Use <code>--skip-data</code> to import schema only</li> </ul> <p>Tip: Ensure prerequisites are installed. If not, run <code>sqlpack install-tools --execute</code> and verify with <code>sqlpack doctor</code>.</p>"},{"location":"commands/install-tools/","title":"Install Tools","text":"<p>Bootstraps required tools for SQLPack workflows. Detects the OS and prints or executes the appropriate install commands for: - mssql-tools18 (<code>sqlcmd</code>, <code>bcp</code>) - PowerShell (<code>pwsh</code>) - dbatools PowerShell module</p>"},{"location":"commands/install-tools/#usage","title":"Usage","text":"<pre><code># Preview required commands for your OS\nsqlpack install-tools\n\n# Execute install commands (macOS Homebrew or Ubuntu/Debian apt)\nsqlpack install-tools --execute\n\n# Help\nsqlpack install-tools --help\n</code></pre>"},{"location":"commands/install-tools/#options","title":"Options","text":"<ul> <li><code>--execute</code> \u2013 Run the printed commands in order. Without this flag, the script only prints the commands.</li> </ul>"},{"location":"commands/install-tools/#supported-systems","title":"Supported Systems","text":"<ul> <li>macOS (Homebrew)</li> <li>Ubuntu/Debian (apt)</li> </ul> <p>For other distributions, follow the manual steps in Installation.</p>"},{"location":"commands/install-tools/#notes","title":"Notes","text":"<ul> <li>On macOS, Homebrew commands accept the Microsoft EULA for <code>msodbcsql18</code>/<code>mssql-tools18</code>.</li> <li>On Ubuntu/Debian, <code>sudo</code> is required for <code>apt</code> commands.</li> <li>Re-run <code>sqlpack doctor</code> after install to verify tools are available on <code>PATH</code>.</li> <li>Optional: set <code>BASH_LOG=trace</code> to see full command output when troubleshooting.</li> </ul>"},{"location":"commands/install-tools/#exit-codes","title":"Exit Codes","text":"<ul> <li>0 \u2013 Success (printed or executed)</li> <li>1 \u2013 Unsupported OS or execution failure</li> <li>2 \u2013 Usage error</li> </ul>"}]}